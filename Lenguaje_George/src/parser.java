
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\012\000\002\005\003" +
    "\000\002\005\002\000\002\006\003\000\002\006\005\000" +
    "\002\007\005\000\002\013\003\000\002\013\003\000\002" +
    "\010\004\000\002\010\003\000\002\011\005\000\002\011" +
    "\006\000\002\011\006\000\002\011\004\000\002\011\005" +
    "\000\002\011\011\000\002\011\007\000\002\011\014\000" +
    "\002\012\004\000\002\012\002\000\002\020\006\000\002" +
    "\017\006\000\002\017\006\000\002\014\003\000\002\014" +
    "\002\000\002\015\003\000\002\015\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\004\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\004\004\004\001\002\000\004\047\012\001" +
    "\002\000\004\002\011\001\002\000\006\002\uffff\004\uffff" +
    "\001\002\000\006\002\000\004\004\001\002\000\006\002" +
    "\ufffe\004\ufffe\001\002\000\004\002\001\001\002\000\004" +
    "\040\013\001\002\000\006\041\ufffb\047\014\001\002\000" +
    "\004\046\157\001\002\000\004\041\ufffc\001\002\000\006" +
    "\041\ufffa\044\155\001\002\000\004\041\020\001\002\000" +
    "\020\006\023\010\024\014\031\022\022\023\030\024\034" +
    "\047\032\001\002\000\004\045\154\001\002\000\010\041" +
    "\ufff7\044\ufff7\047\ufff7\001\002\000\020\006\023\010\024" +
    "\014\031\022\022\023\030\024\034\047\032\001\002\000" +
    "\004\047\137\001\002\000\022\005\135\006\023\010\024" +
    "\014\031\022\022\023\030\024\034\047\032\001\002\000" +
    "\026\005\ufff4\006\ufff4\007\ufff4\010\ufff4\014\ufff4\016\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\047\ufff4\001\002\000\004\025" +
    "\132\001\002\000\006\040\111\047\ufff6\001\002\000\020" +
    "\017\036\020\043\021\046\023\040\040\041\047\045\050" +
    "\042\001\002\000\010\025\116\040\075\042\074\001\002" +
    "\000\004\047\114\001\002\000\020\017\036\020\043\021" +
    "\046\023\040\040\041\047\045\050\042\001\002\000\044" +
    "\012\uffd6\013\uffd6\015\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\041\uffd6\043\uffd6\044\uffd6\045\uffd6\001\002\000\044\012" +
    "\uffd3\013\uffd3\015\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\041" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\001\002\000\044\012\uffd7" +
    "\013\uffd7\015\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\041\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\001\002\000\004\040\111\001" +
    "\002\000\020\017\036\020\043\021\046\023\040\040\041" +
    "\047\045\050\042\001\002\000\044\012\uffd4\013\uffd4\015" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\001\002\000\044\012\uffd2\013\uffd2\015\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\041\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\001\002\000\030\026\051\027\061\030\050\031" +
    "\056\032\053\033\057\034\055\035\052\036\054\037\060" +
    "\045\106\001\002\000\050\012\uffd5\013\uffd5\015\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\075\041\uffd5\042\074\043" +
    "\uffd5\044\uffd5\045\uffd5\001\002\000\020\017\036\020\043" +
    "\021\046\023\040\040\041\047\045\050\042\001\002\000" +
    "\044\012\uffd8\013\uffd8\015\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\041\uffd8\043\uffd8\044\uffd8\045\uffd8\001\002\000\020" +
    "\017\036\020\043\021\046\023\040\040\041\047\045\050" +
    "\042\001\002\000\020\017\036\020\043\021\046\023\040" +
    "\040\041\047\045\050\042\001\002\000\020\017\036\020" +
    "\043\021\046\023\040\040\041\047\045\050\042\001\002" +
    "\000\020\017\036\020\043\021\046\023\040\040\041\047" +
    "\045\050\042\001\002\000\020\017\036\020\043\021\046" +
    "\023\040\040\041\047\045\050\042\001\002\000\020\017" +
    "\036\020\043\021\046\023\040\040\041\047\045\050\042" +
    "\001\002\000\020\017\036\020\043\021\046\023\040\040" +
    "\041\047\045\050\042\001\002\000\020\017\036\020\043" +
    "\021\046\023\040\040\041\047\045\050\042\001\002\000" +
    "\020\017\036\020\043\021\046\023\040\040\041\047\045" +
    "\050\042\001\002\000\020\017\036\020\043\021\046\023" +
    "\040\040\041\047\045\050\042\001\002\000\044\012\uffdd" +
    "\013\uffdd\015\uffdd\026\uffdd\027\uffdd\030\050\031\056\032" +
    "\053\033\057\034\055\035\052\036\054\037\060\041\uffdd" +
    "\043\uffdd\044\uffdd\045\uffdd\001\002\000\044\012\uffdf\013" +
    "\uffdf\015\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\041\uffdf\043" +
    "\uffdf\044\uffdf\045\uffdf\001\002\000\044\012\uffdb\013\uffdb" +
    "\015\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\055\035\052\036\054\037\060\041\uffdb\043\uffdb" +
    "\044\uffdb\045\uffdb\001\002\000\044\012\uffd9\013\uffd9\015" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\055\035\052\036\054\037\060\041\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\001\002\000\044\012\uffe2\013\uffe2\015\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\054\037\060\041\uffe2\043\uffe2\044\uffe2" +
    "\045\uffe2\001\002\000\044\012\uffe0\013\uffe0\015\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\041\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\001\002\000\044\012\uffdc\013\uffdc\015\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\055\035" +
    "\052\036\054\037\060\041\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\001\002\000\044\012\uffe1\013\uffe1\015\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\054\037\060\041\uffe1\043\uffe1\044\uffe1\045\uffe1\001" +
    "\002\000\044\012\uffde\013\uffde\015\uffde\026\uffde\027\uffde" +
    "\030\050\031\056\032\053\033\057\034\055\035\052\036" +
    "\054\037\060\041\uffde\043\uffde\044\uffde\045\uffde\001\002" +
    "\000\044\012\uffda\013\uffda\015\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\055\035\052\036\054" +
    "\037\060\041\uffda\043\uffda\044\uffda\045\uffda\001\002\000" +
    "\020\017\036\020\043\021\046\023\040\040\041\047\045" +
    "\050\042\001\002\000\022\017\036\020\043\021\046\023" +
    "\040\040\041\041\uffe5\047\045\050\042\001\002\000\032" +
    "\026\051\027\061\030\050\031\056\032\053\033\057\034" +
    "\055\035\052\036\054\037\060\041\uffe4\044\102\001\002" +
    "\000\004\041\uffe6\001\002\000\004\041\101\001\002\000" +
    "\044\012\uffe8\013\uffe8\015\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\041\uffe8\043\uffe8\044\uffe8\045\uffe8\001\002\000\020" +
    "\017\036\020\043\021\046\023\040\040\041\047\045\050" +
    "\042\001\002\000\004\041\uffe3\001\002\000\030\026\051" +
    "\027\061\030\050\031\056\032\053\033\057\034\055\035" +
    "\052\036\054\037\060\043\105\001\002\000\046\012\uffe9" +
    "\013\uffe9\015\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\041\uffe9\043\uffe9\044\uffe9\045\uffe9\001\002\000\026\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\014\uffef\016\uffef\022\uffef" +
    "\023\uffef\024\uffef\047\uffef\001\002\000\030\026\051\027" +
    "\061\030\050\031\056\032\053\033\057\034\055\035\052" +
    "\036\054\037\060\041\110\001\002\000\044\012\uffd1\013" +
    "\uffd1\015\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\041\uffd1\043" +
    "\uffd1\044\uffd1\045\uffd1\001\002\000\022\017\036\020\043" +
    "\021\046\023\040\040\041\041\uffe5\047\045\050\042\001" +
    "\002\000\004\041\113\001\002\000\044\012\uffe7\013\uffe7" +
    "\015\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\041\uffe7\043\uffe7" +
    "\044\uffe7\045\uffe7\001\002\000\004\045\115\001\002\000" +
    "\026\005\ufff3\006\ufff3\007\ufff3\010\ufff3\014\ufff3\016\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\047\ufff3\001\002\000\020\017" +
    "\036\020\043\021\046\023\040\040\041\047\045\050\042" +
    "\001\002\000\030\026\051\027\061\030\050\031\056\032" +
    "\053\033\057\034\055\035\052\036\054\037\060\045\120" +
    "\001\002\000\026\005\ufff2\006\ufff2\007\ufff2\010\ufff2\014" +
    "\ufff2\016\ufff2\022\ufff2\023\ufff2\024\ufff2\047\ufff2\001\002" +
    "\000\030\015\122\026\051\027\061\030\050\031\056\032" +
    "\053\033\057\034\055\035\052\036\054\037\060\001\002" +
    "\000\020\006\023\010\024\014\031\022\022\023\030\024" +
    "\034\047\032\001\002\000\024\005\uffea\006\023\010\024" +
    "\014\031\016\126\022\022\023\030\024\034\047\032\001" +
    "\002\000\004\005\130\001\002\000\026\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\014\ufff5\016\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\047\ufff5\001\002\000\020\006\023\010\024\014\031" +
    "\022\022\023\030\024\034\047\032\001\002\000\022\005" +
    "\uffeb\006\023\010\024\014\031\022\022\023\030\024\034" +
    "\047\032\001\002\000\004\045\131\001\002\000\026\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\014\uffee\016\uffee\022\uffee" +
    "\023\uffee\024\uffee\047\uffee\001\002\000\020\017\036\020" +
    "\043\021\046\023\040\040\041\047\045\050\042\001\002" +
    "\000\030\026\051\027\061\030\050\031\056\032\053\033" +
    "\057\034\055\035\052\036\054\037\060\045\134\001\002" +
    "\000\026\005\ufff1\006\ufff1\007\ufff1\010\ufff1\014\ufff1\016" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\047\ufff1\001\002\000\004" +
    "\045\136\001\002\000\006\002\ufffd\004\ufffd\001\002\000" +
    "\004\011\140\001\002\000\020\017\036\020\043\021\046" +
    "\023\040\040\041\047\045\050\042\001\002\000\030\012" +
    "\142\026\051\027\061\030\050\031\056\032\053\033\057" +
    "\034\055\035\052\036\054\037\060\001\002\000\020\017" +
    "\036\020\043\021\046\023\040\040\041\047\045\050\042" +
    "\001\002\000\030\013\144\026\051\027\061\030\050\031" +
    "\056\032\053\033\057\034\055\035\052\036\054\037\060" +
    "\001\002\000\020\006\023\010\024\014\031\022\022\023" +
    "\030\024\034\047\032\001\002\000\022\005\146\006\023" +
    "\010\024\014\031\022\022\023\030\024\034\047\032\001" +
    "\002\000\004\045\147\001\002\000\026\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\014\uffec\016\uffec\022\uffec\023\uffec\024" +
    "\uffec\047\uffec\001\002\000\022\006\023\007\151\010\024" +
    "\014\031\022\022\023\030\024\034\047\032\001\002\000" +
    "\020\017\036\020\043\021\046\023\040\040\041\047\045" +
    "\050\042\001\002\000\030\026\051\027\061\030\050\031" +
    "\056\032\053\033\057\034\055\035\052\036\054\037\060" +
    "\045\153\001\002\000\026\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\014\uffed\016\uffed\022\uffed\023\uffed\024\uffed\047\uffed" +
    "\001\002\000\026\005\ufff0\006\ufff0\007\ufff0\010\ufff0\014" +
    "\ufff0\016\ufff0\022\ufff0\023\ufff0\024\ufff0\047\ufff0\001\002" +
    "\000\004\047\014\001\002\000\004\041\ufff9\001\002\000" +
    "\006\022\022\023\160\001\002\000\006\041\ufff6\044\ufff6" +
    "\001\002\000\006\041\ufff8\044\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\010\002\004\003\006\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\016\006\014\007\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\024\011\025\013\032\017\020" +
    "\020\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\147\011\025\013\032\017\020\020\026\001\001" +
    "\000\002\001\001\000\012\011\124\013\032\017\020\020" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\120\017\034\020\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\043\017\034" +
    "\020\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\106\017\034" +
    "\020\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\046\017\034" +
    "\020\036\001\001\000\002\001\001\000\010\016\072\017" +
    "\034\020\036\001\001\000\010\016\071\017\034\020\036" +
    "\001\001\000\010\016\070\017\034\020\036\001\001\000" +
    "\010\016\067\017\034\020\036\001\001\000\010\016\066" +
    "\017\034\020\036\001\001\000\010\016\065\017\034\020" +
    "\036\001\001\000\010\016\064\017\034\020\036\001\001" +
    "\000\010\016\063\017\034\020\036\001\001\000\010\016" +
    "\062\017\034\020\036\001\001\000\010\016\061\017\034" +
    "\020\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\103\017\034\020\036" +
    "\001\001\000\014\014\077\015\076\016\075\017\034\020" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\102\016\075\017" +
    "\034\020\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\111\015\076\016\075\017\034" +
    "\020\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\116\017\034" +
    "\020\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\122\011\025\013\032\017\020" +
    "\020\026\001\001\000\014\011\124\012\123\013\032\017" +
    "\020\020\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\126\011\025\013\032\017\020\020\026\001" +
    "\001\000\012\011\124\013\032\017\020\020\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\132\017" +
    "\034\020\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\140\017\034\020\036\001\001\000\002\001\001" +
    "\000\010\016\142\017\034\020\036\001\001\000\002\001" +
    "\001\000\014\010\144\011\025\013\032\017\020\020\026" +
    "\001\001\000\012\011\124\013\032\017\020\020\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\124" +
    "\013\032\017\020\020\026\001\001\000\010\016\151\017" +
    "\034\020\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\155\007\015\001\001\000" +
    "\002\001\001\000\004\013\160\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public void syntax_error(java_cup.runtime.Symbol s) {
    System.err.printf(
      "Error de sintaxis (línea %d, columna %d): token inesperado%n",
      s.left, s.right
    );
  }

  public void report_fatal_error(String message, Object info) {
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
      System.err.printf(
        "Error fatal (línea %d, columna %d): %s%n",
        s.left, s.right, message
      );
    } else {
      System.err.println("Error fatal: " + message);
    }
    try {
      super.report_fatal_error(message, info);
    } catch (Exception e) {
      throw new RuntimeException("Error fatal no recuperable: " + message, e);
    }
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= procedimientos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // procedimientos ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // procedimientos ::= procedimientos procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimientos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // procedimiento ::= PROCEDURE ID PARI parametros_opt PARD instrucciones END PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parametros_opt ::= parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_opt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parametros_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_opt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametro ::= ID DOSPUNTOS tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= LIST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrucciones ::= instrucciones instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= tipo ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= ID ASIGNACION expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= acceso ASIGNACION expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= llamada PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= RETURN expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= IF expresion THEN instrucciones else_opt END PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= REPEAT instrucciones UNTIL expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= FOR ID FROM expresion TO expresion DO instrucciones END PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // else_opt ::= ELSE instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_opt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // else_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_opt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // acceso ::= ID CORI expresion CORD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("acceso",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // llamada ::= ID PARI argumentos_opt PARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // llamada ::= LIST PARI argumentos_opt PARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // argumentos_opt ::= argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos_opt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argumentos_opt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos_opt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // argumentos ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // argumentos ::= expresion COMA argumentos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion MAS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= expresion MENOS expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion POR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion DIV expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion IGUALDAD expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion DIFERENTE expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion MENOR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion MENORIGUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= NOT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= acceso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= llamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= PARI expresion PARD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
